<?php

function auto_opengraph_menu() {
  $items['admin/settings/auto-opengraph'] = array(
    'title' => t('Auto Opengraph'),
    'description' => t('Manages creation of opengraph tags for facebook.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auto_opengraph_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'auto_opengraph.admin.inc',
  );
  return $items; 
}

/**
 * Implements hook_theme().
 * @return array
 */
function auto_opengraph_theme() {
  $ret = array(
    'auto_opengraph_crop_summary' => array(
      'variables' => array('data' => NULL),
    ),
  );
  return $ret;
}

function auto_opengraph_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    include_once drupal_get_path('module', 'auto_opengraph') . '/auto_opengraph.admin.inc';
    $form['auto_opengraph'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook / OpenGraph'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
  }
}

function auto_opengraph_get_tags($type = NULL, $bundle = NULL) {
  $default = variable_get('auto_opengraph_tags__default', array(
    'og:type' => 'article',
    'og:url' => '[current-page-url]',              # defaults to the current url of the page
    'og:site_name' => '[site-name]',        # in almost all cases the site_name should be automatic
  ));
  if (is_null($type) || $type == 'default') {
    $ret = $default;
  }
  elseif ($type == 'front') {
    $ret = array_merge($default, variable_get("auto_opengraph_tags__front", array()));
  }
  else {
    $ret = array_merge($default, variable_get("auto_opengraph_tags__$type", array()));
    if ($bundle) {
      $ret = array_merge($ret, variable_get("auto_opengraph_tags__{$type}__$bundle", array()));
    }
  }
  str_replace('<none>', '', $ret);
  return array_filter($ret);
}

function _auto_opengraph_form($type = NULL, $bundle = NULL, $fieldset = NULL) {
  drupal_add_css(drupal_get_path('module', 'auto_opengraph') . '/auto_opengraph_form.css');
  if (!$type || $type == 'default') {
    $tags = auto_opengraph_get_tags();
    $tagtype = 'default';
  }
  else {
    $tagtype = !empty($bundle) ? "{$type}__$bundle" : $type;
    $tags = variable_get("auto_opengraph_tags__$tagtype", array());
  }
  $Basic = array(
    'og:title' => t('The title for the page.'),                                  # defaults to the page title
    'og:type' => t('The type of opengraph page represented. Choose from: @types', array('@types' => implode(', ', auto_opengraph_types()))),
    'og:url' => t('The url of the opengraph page.'),                             # defaults to the current url of the page
    'og:image' => t('The url of an image to display for this opengraph page.  The image will be processed according to Facebook standards.'),
    'fb:admins' => t('A comma-separated list of Facebook user ids or user names who should be allowed to administer the page.'),
    'fb:app_id' => t('The app ID number of the Facebook app that should administer the page.'),
    'og:site_name' => t('In almost all cases, this should just be [site:name].'),
    'og:description' => t('A short description for the page.'),
  );
  $Advanced = array(
    // Multimedia
    'og:audio' => t('The url of a publicly-available audio file which should play on Facebook.'),
    'og:audio:title' => t('The title of the audio file.'),
    'og:audio:artist' => t('The artist of the audio file.'),
    'og:audio:album' => t('The album containing the audio file.'),
    'og:audio:type' => t('The mime type of the audio file.'),
    'og:video' => t('The url of a publicly-available video file which should play on Facebook.'),
    'og:video:height' => t('The height of the video file.'),
    'og:video:width' => t('The width of the video file.'),
    'og:video:type' => t('The mime type of the video file.'),
    // Location
    'og:latitude' => t('Latitude in decimal format.'),
    'og:longitude' => t('Longitude in decimal format.'),
    'og:street-address' => t('The street address of the location associated with this page.'),
    'og:locality' => t('The city, town, or local administrative area.'),
    'og:region' => t('The state, province, or regional administrative area.'),
    'og:postal-code' => t('The postal code.'),
    'og:country-name' => t('The country name.'),
    // Contact
    'og:email' => t('The PUBLIC contact email of the entity represented by the page.'),
    'og:phone_number' => t('The PUBLIC contact phone of the entity represented by the page.'),
    'og:fax_number' => t('The PUBLIC contact fax of the entity represented by the page.'),
  );
  $Custom = array(); // TODO: implement custom fields?
  $element = array(
    '#type' => 'fieldset',
    '#title' => $fieldset ? $fieldset : t('Auto opengraph tags'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#attributes' => array('class' => array('auto_opengraph_element')),
  );
  foreach (array('Basic', 'Advanced', 'Custom') as $category) {
    if (count($$category)) {
      $element[$category] = array(
        '#type' => 'fieldset',
        '#title' => t($category),
        '#collapsible' => TRUE,
        '#collapsed' => $category != 'Basic',
      );
      foreach ($$category as $field => $description) {
        if (is_numeric($field)) {
          $field = $description;
        }
        $element[$category][$field] = array(
          '#type' => 'textfield',
          '#attributes' => array('title' => check_plain($description)),
          '#title' => str_replace('og:', '', $field),
          '#default_value' => !empty($tags[$field]) ? $tags[$field] : '',
        );
      }
    }
  }
  $token_type = ($type && !in_array($type, array('default', 'front'))) ? array($type) : array();
  $token_type = str_replace('taxonomy_term', 'term', $token_type);              // Why, Dave?
  $element['tokens'] = array(
    '#type' => 'fieldset',
    '#title' => t('Available tokens'),
  );
  $element['tokens']['help'] = array(
    '#value' => theme('token_help', $token_type)
  );
  return $element;
}

function auto_opengraph_imagecache_actions() {
  return array(
    'auto_opengraph_crop' => array(
      'name' => 'Aspect Crop',
      'description' => 'Crop an image to an aspect ratio.',
      'file' => 'auto_opengraph.imagecache.inc',
    ),
  );
}

function auto_opengraph_preprocess_page(&$vars) {
  if ($vars['is_front']) {
    $tags = auto_opengraph_get_tags('front');
    $type = 'global';
    $object = '';
  }
  else {
    foreach(variable_get('auto_opengraph_object_types', array('node', 'term')) as $type) {
      $path = $type == 'term' ? 'taxonomy/term/' : "$type/";
      if (stripos($_GET['q'], $path) === 0) {
        switch($type) {
          case 'node':
            $object = node_load(arg(1));
            break;
          case 'user':
            $object = user_load(arg(1));
            break;
          case 'term':
            $object = taxonomy_get_term(arg(2));
            break;
        }
        break;
      }
    }
    if (!$object) {
      return;
    }
  }
  if ($tags) {
    foreach ($tags as $tag => $value) {
      $tags[$tag] = str_replace('"', "'", strip_tags(token_replace($value, $type, $object, TOKEN_PREFIX, TOKEN_SUFFIX, array('clear' => TRUE))));
      drupal_set_html_head('<meta property="' . check_plain($property) . '" content="' . $tags[$tag] . '" />');
    }
    if (variable_get('auto_opengraph_write_description', FALSE)) {
      drupal_set_html_head('<meta property="description" content="' . $tags['og:description'] . '" />');
    }
    $vars['head'] = drupal_get_html_head();
  }
}

function auto_opengraph_types() {
  $ret = array(
    'activity',
    'sport',
    'bar',
    'company',
    'cafe',
    'hotel',
    'restaurant',
    'cause',
    'sports_league',
    'sports_team',
    'band',
    'government',
    'non_profit',
    'school',
    'university',
    'actor',
    'athlete',
    'author',
    'director',
    'musician',
    'politician',
    'public_figure',
    'city',
    'country',
    'landmark',
    'state_province',
    'album',
    'book',
    'drink',
    'food',
    'game',
    'product',
    'song',
    'movie',
    'tv_show',
    'blog',
    'website',
    'article',
  );
  return $ret;
}

function auto_opengraph_properties() {
  return array(

    // basics
    'site_name' => 0,        # in almost all cases the site_name should be automatic
    'title' => 0,            # defaults to the page title
    'url' => 0,              # defaults to the current url of the page
    'type' => 0,
    'description' => 0,
    'image' => 0,

    // facebook
    'fb:admins' => 'fb',
    'fb:app_id' => 'fb',

    // multimedia
    'audio' => 0,
    'audio:title' => 0,      # optional
    'audio:artist' => 0,     # optional
    'audio:album' => 0,      # optional
    'audio:type' => 0,       # optional

    'video' => 0,
    'video:height' => 0,     # optional
    'video:width' => 0,      # optional
    'video:type' => 0,       # optional

    // Location (automatic if location module is used)
    'latitude' => 'location',
    'longitude' => 'location',
    'street-address' => 'location',
    'locality' => 'location',
    'region' => 'location',
    'postal-code' => 'location',
    'country-name' => 'location',

    // Contact
    'email' => 'contact',
    'phone_number' => 'contact',
    'fax_number' => 'contact',

  );
}