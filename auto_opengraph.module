<?php

function auto_opengraph_menu() {
  $items['admin/settings/auto-opengraph'] = array(
    'title' => t('Auto Opengraph'),
    'description' => t('Manages creation of opengraph tags for facebook.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auto_opengraph_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'auto_opengraph.admin.inc',
  );
  return $items; 
}

function auto_opengraph_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    include_once drupal_get_path('module', 'auto_opengraph') . '/auto_opengraph.admin.inc';
    $form['auto_opengraph'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook / OpenGraph'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $all_properties = auto_opengraph_properties();
    foreach ($all_properties as $property => $section) { $og[$property] = array(); }
    _auto_opengraph_settings_form_get_fields('node', $og);
    $form['auto_opengraph'] = array_merge($form['auto_opengraph'], _auto_opengraph_settings_form_get_section_settings('node_item_' . $form['identity']['type'], $og));
  }
  elseif (isset($form['type']) && isset($form['#node'])) {
    if (variable_get("auto_opengraph_node_field_type", FALSE) == 'auto_opengraph_type' ||
        variable_get("auto_opengraph_node_item_{$form['#node']->type}_og_type_field", FALSE) == 'auto_opengraph_type') {
      $form['auto_opengraph']['auto_opengraph_type'] = array(
        '#type' => 'select',
        '#title' => t('Opengraph type'),
        '#options' => array_merge(array(0 => t('- use default -')), auto_opengraph_types()),
        '#description' => t('Facebook pages only recognize certain types of real word objects.  See <a href="http://developers.facebook.com/docs/opengraph">the opengraph doc page</a> for reference.'),
        '#default_value' => $form['#node']->auto_opengraph['auto_opengraph_type'],
      );
    }
    if (variable_get("auto_opengraph_node_item_{$form['#node']->type}_add_fb", FALSE) == 'choose' && user_access('set facebook page status on nodes')) {
      $form['auto_opengraph']['auto_opengraph_fb_page'] = array(
        '#type' => 'checkbox',
        '#title' => t('Create a facebook page'),
        '#description' => t('Select this to create a full facebook "page" if a facebook account or application id is known.
                  Note that a lot of content may not be suitable as a full facebook "page".  Users who "like" a "page" will have
                  that page appear in their "likes" section on the profile, and receive updates from that "page".'),
        '#default_value' => $form['#node']->auto_opengraph['auto_opengraph_fb_page'],
      );
    }
    if (is_array($form['auto_opengraph'])) {
      $form['auto_opengraph']['#type'] = 'fieldset';
      $form['auto_opengraph']['#title'] = t('Facebook');
      $form['auto_opengraph']['#collapsible'] = TRUE;
      $form['auto_opengraph']['#collapsed'] = TRUE;
      $form['auto_opengraph']['#tree'] = TRUE;
    }
  }
}

function auto_opengraph_nodeapi(&$node, $op, $a3, $a4) {
  switch ($op) {
    case 'load':
      if ($row = db_fetch_array(db_query("SELECT * FROM {auto_opengraph} WHERE nid = %d", $node->nid))) { // intentional assignment of $row
        $node->auto_opengraph = $row;
        $node->auto_opengraph_fb_page = $row['auto_opengraph_fb_page'];
        $node->auto_opengraph_type = $row['auto_opengraph_type'];
      }
      break;
    case 'insert':
      if ($node->auto_opengraph['auto_opengraph_type'] || $node->auto_opengraph['auto_opengraph_fb_page']) {
        $record = $node->auto_opengraph;
        $record['nid'] = $node->nid;
        drupal_write_record('auto_opengraph', $record);
      }
      break;
    case 'update':
      if ($node->auto_opengraph['auto_opengraph_type'] || $node->auto_opengraph['auto_opengraph_fb_page']) {
        if ($ogid = db_result(db_query("SELECT ogid FROM {auto_opengraph} WHERE nid = %d", $node->nid))) { // intentional assignment of $ogid
          $node->auto_opengraph['ogid'] = $ogid;
          drupal_write_record('auto_opengraph', $node->auto_opengraph, 'ogid');
        }
        else {
          $record = $node->auto_opengraph;
          $record['nid'] = $node->nid;
          drupal_write_record('auto_opengraph', $record);
        }
      }
      else {
        db_query("DELETE FROM {auto_opengraph} WHERE ogid = %d", $node->auto_opengraph['ogid']);
      }
      break;
    case 'delete':
      db_query("DELETE FROM {auto_opengraph} WHERE nid = %d", $node->nid);
      break;
  }
}

function auto_opengraph_theme() {
  $ret = array(
    'auto_opengraph_crop' => array(
      'file' => 'auto_opengraph.imagecache.inc',
      'arguments' => array('element' => NULL),
    ),
    'auto_opengraph_image' => array(
      'file' => 'auto_opengraph.theme.inc',
      'arguments' => array('image' => NULL),
    ),
  );

  // CCK fields
  foreach (array('text', 'number', 'optionwidgets', 'filefield', 'imagefield', 'emvideo', 'emaudio', 'emimage') as $module) {
    if (module_exists($module)) {
      $ret["auto_opengraph_widget_{$module}_value"] = array(
        'file' => 'auto_opengraph.theme.inc',
        'arguments' => array(
          'data' => NULL,
          'property' => NULL,
          'widget' => NULL,
        )
      );
    }
  }

  // Other fields
  foreach (array('teaser', 'body', 'locations', 'taxonomy', 'auto_opengraph_type') as $field) {
    $ret["auto_opengraph_node_{$field}_value"] = array(
      'file' => 'auto_opengraph.theme.inc',
      'arguments' => array(
        'data' => NULL,
        'property' => NULL,
        'field' => NULL,
      )
    );
  }

  return $ret;

}

function auto_opengraph_perm() {
  return array('administer opengraph for facebook', 'set facebook page status on nodes');
}

function auto_opengraph_imagecache_actions() {
  return array(
    'auto_opengraph_crop' => array(
      'name' => 'Aspect Crop',
      'description' => 'Crop an image to an aspect ratio.',
      'file' => 'auto_opengraph.imagecache.inc',
    ),
  );
}

function auto_opengraph_set($property = NULL, $value = NULL) {
  static $og;

  if (is_null($property)) {
    if (is_array($og)) {
      return $og;
    }
    else {
      $og = array();
      return $og;
    }
  }

  if ($property == 'all') {
    if (is_array($value)) {
      $og = array_merge($og, $value);
      return $og;
    }
    return $og;
  }

  $og[$property] = $value;
  return $og;

}

function auto_opengraph_preprocess_page(&$vars) {

  $arg = arg(0);
  if ($arg == 'admin') return;
  if (variable_get('auto_opengraph_disable_for_tabs', TRUE) && arg(2) && ($arg == 'node' || $arg == 'user')) return;
  $arg = in_array($arg, array('node', 'user', 'taxonomy')) ? $arg : 'other';
  if (!variable_get("auto_opengraph_$arg", TRUE)) return;

  $og = auto_opengraph_set();
  switch ($arg) {

    case 'node':

      // nodes are a little different than other objects, because
      // opengraph settings can be different for each type of node

      if (!variable_get("auto_opengraph_node_item_{$vars['node']->type}", TRUE)) return; // don't set opengraph headers if they are not enabled for the content type

      if ($vars['node']->path) $og['url'] = url($vars['node']->path, array('absolute' => TRUE)); // get the node url

      foreach(array_reverse(auto_opengraph_properties()) as $property => $section) { // the order in which properties are added is reversed, because defaults are added only if a property has no value
        $sections[$section] = variable_get("auto_opengraph_node_item_{$vars['node']->type}_add_$section", FALSE);
        if (!$section || (!is_numeric($sections[$section]) && ($sections[$section] != 'choose' || $vars['node']->auto_opengraph_fb_page))) { // sections have five settings, the numeric ones are 0 for disabled and 1 for defaults only
          if (!$field = variable_get("auto_opengraph_node_item_{$vars['node']->type}_field_$property", FALSE)) $field = variable_get("auto_opengraph_node_field_$property", FALSE); // individual node types may have their own fields, especially for the "type" og property
          if ($field = explode('|', $field)) { // each field may have arguments separated by a | character
            if (!empty($vars['node']->{$field[0]})) { // only continue if the field has a value
              $field_data = content_fields($field[0], $node->type); // for CCK fields, we get the field definition to determine the module
              if (!empty($field_data['widget'])) { // this is a CCK field
                if ($value = theme("auto_opengraph_widget_{$field_data['widget']['module']}_value", $vars['node']->{$field[0]}, $property, $field_data['widget']['type'])) { // for the theme_widget calls, we pass only the field itself; for all other theme calls, we pass the entire object.
                  $og[$property] = $value;
                  if ($sections[$section] == 'all') $sections[$section] = 'fields'; // if the section is set to override all values if only a single property is set
                }
              }
              else { // this is a module-defined "field", which may be any property of the node object
                if ($value = theme("auto_opengraph_node_{$field[0]}_value", $vars['node'], $property, $field)) { // intentional assignment of $value
                  $og[$property] = $value;
                  if ($sections[$section] == 'all') $sections[$section] = 'fields'; // if the section is set to override all values if only a single property is set
                }
              }
            }
          }
        }
      }

      break;

    case 'user': // for users, we pass the user object as data
      $data = user_load(arg(1));
      break;

    case 'taxonomy': // for taxonomy term pages, we pass an array of all taxonomy terms as data
      $data = array();
      $terms = taxonomy_terms_parse_string(arg(3));
      if ($terms['operator'] == 'or' || $terms['operator'] == 'and') {
        foreach ($terms['tids'] as $tid) {
          $data[$tid] = taxonomy_get_term($tid);
        }
      }
      break;

    default: // for all other pages, we pass the array of page $vars as data
      $data = $vars;
      break;
  }
  
  if ($arg != 'node') { // for non-node pages, we don't need the content types, so they can be lumped together.
    foreach (array_reverse(auto_opengraph_properties()) as $property => $section) { // the order in which properties are added is reversed, because defaults are added only if a property has no value
      if (!$section || !is_numeric($sections[$section] = variable_get("auto_opengraph_{$arg}_add_$section", FALSE))) { // sections have five settings, the numeric ones are 0 for disabled and 1 for defaults only
        if ($field = explode('|', variable_get("auto_opengraph_{$arg}_field_$property", FALSE))) { // intentional assignments of $field
          if ($value = theme("auto_opengraph_{$arg}_{$field[0]}_value", $data, $property, $field)) { // intentional assignment of $value
            $og[$property] = $value;
            if ($sections[$section] == 'all') $sections[$section] = 'fields'; // if the section is set to override all values if only a single property is set
          }
        }
      }
    }
  }

  $temp = ($arg == 'node') ? "node_item_{$vars['node']->type}" : $arg; // from now on, we need to deal with the node types and other object types

  if (!$og['type'] && ($type = variable_get("auto_opengraph_{$temp}_og_type", FALSE))) { // set the default type if one is not already set
    $og['type'] = $type;
  }

  if ($vars['is_front'] && variable_get('auto_opengraph_front_page', TRUE)) {
    $og['type'] = variable_get('auto_opengraph_site_type', 'website');
    $og['url'] = url('', array('absolute' => TRUE));
    foreach(array('image', 'fb:admins', 'fb:app_id') as $property) {
      if ($value = variable_get("auto_opengraph_default_$property", '')) { // intentional assignment of $value
        $og[$property] = $value;
      }
    }
  }

  _auto_opengraph_add('basic', $og); // add basic fields (will not overwrite existing values)
  foreach (array('location', 'contact', 'fb') as $section) {
    if ($sections[$section] && ($sections[$section] != 'fields')) {  // only add the section data if it is enabled for this page
      _auto_opengraph_add($section, $og); // add sections (will not overwrite existing values)
    }
  }

  if (!$og['url']) { $og['url'] = url(implode('/',arg()), array('absolute' => TRUE)); }
  if (!$og['title']) { $og['title'] = $vars['head_title']; }

  if (!empty($og)) {
    foreach ($og as $property => $value) {
      if (!in_array($property, array('fb:admins', 'fb:app_id'))) { $property = "og:$property"; }
      drupal_set_html_head('<meta property="' . check_plain($property) . '" content="' . str_replace('"', "'", strip_tags($value)) . '" />');
    }
    $vars['head'] = drupal_get_html_head();
  }

}

function _auto_opengraph_add($part, &$og) {
  include_once('auto_opengraph.functions.inc');
  if (function_exists($function = "_auto_opengraph_add_$part")) {
    $function($og);
  }
}

function auto_opengraph_types() {
  $ret = array(
    t('Activities') => array(
      'activity' => t('activity'),
      'sport' => t('sport'),
    ),
    t('Businesses') => array(
      'bar' => t('bar'),
      'company' => t('company'),
      'cafe' => t('cafe'),
      'hotel' => t('hotel'),
      'restaurant' => t('restaurant'),
    ),
    t('Groups') => array(
      'cause' => t('cause'),
      'sports_league' => t('sports_league'),
      'sports_team' => t('sports_team'),
    ),
    t('Organizations') => array(
      'band' => t('band'),
      'government' => t('government'),
      'non_profit' => t('non_profit'),
      'school' => t('school'),
      'university' => t('university'),
    ),
    t('People') => array(
      'actor' => t('actor'),
      'athlete' => t('athlete'),
      'author' => t('author'),
      'director' => t('director'),
      'musician' => t('musician'),
      'politician' => t('politician'),
      'public_figure' => t('public_figure'),
    ),
    t('Places') => array(
      'city' => t('city'),
      'country' => t('country'),
      'landmark' => t('landmark'),
      'state_province' => t('state_province'),
    ),
    t('Products and Entertainment') => array(
      'album' => t('album'),
      'book' => t('book'),
      'drink' => t('drink'),
      'food' => t('food'),
      'game' => t('game'),
      'product' => t('product'),
      'song' => t('song'),
      'movie' => t('movie'),
      'tv_show' => t('tv_show'),
    ),
    t('Websites') => array(
      'blog' => t('blog'),
      'website' => t('website'),
      'article' => t('article'),
    ),
  );
  return $ret;
}

function auto_opengraph_properties() {
  return array(

    // basics
    'site_name' => 0,        # in almost all cases the site_name should be automatic
    'title' => 0,            # defaults to the page title
    'url' => 0,              # defaults to the current url of the page
    'type' => 0,
    'description' => 0,
    'image' => 0,

    // facebook
    'fb:admins' => 'fb',
    'fb:app_id' => 'fb',

    // multimedia
    'audio' => 0,
    'audio:title' => 0,      # optional
    'audio:artist' => 0,     # optional
    'audio:album' => 0,      # optional
    'audio:type' => 0,       # optional

    'video' => 0,
    'video:height' => 0,     # optional
    'video:width' => 0,      # optional
    'video:type' => 0,       # optional

    // Location (automatic if location module is used)
    'latitude' => 'location',
    'longitude' => 'location',
    'street-address' => 'location',
    'locality' => 'location',
    'region' => 'location',
    'postal-code' => 'location',
    'country-name' => 'location',

    // Contact
    'email' => 'contact',
    'phone_number' => 'contact',
    'fax_number' => 'contact',

  );
}