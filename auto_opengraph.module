<?php

/**
 * Implements hook_menu().
 */
function auto_opengraph_menu() {
  $items['admin/config/content/auto-opengraph'] = array(
    'title' => t('Auto Opengraph'),
    'description' => t('Manages creation of opengraph tags for facebook.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auto_opengraph_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'auto_opengraph.admin.inc',
  );
  return $items; 
}

/**
 * Implements hook_theme().
 * @return array 
 */
function auto_opengraph_theme() {
  $ret = array(
    'auto_opengraph_crop_summary' => array(
      'variables' => array('data' => NULL),
    ),
    'auto_opengraph_image' => array(
      'file' => 'auto_opengraph.theme.inc',
      'variables' => array('image' => NULL),
    ),
  );
  return $ret;
}

function auto_opengraph_get_tags($type = NULL, $bundle = NULL) {
  $default = variable_get('auto_opengraph_tags_default', array(
    'og:type' => 'article',
    'og:url' => '[current-page:url:absolute]',              # defaults to the current url of the page
    'og:site_name' => '[site:name]',        # in almost all cases the site_name should be automatic
  ));
  if (is_null($type) || $type == 'default') {
    $ret = $default;
  }
  elseif ($type == 'front') {
    $ret = array_merge($default, variable_get("auto_opengraph_tags_front", array()));
  }
  else {
    $ret = array_merge($default, variable_get("auto_opengraph_tags-$type", array()));
    $var = $bundle ? "$type:$bundle" : $type;
    $ret = array_merge($ret, variable_get("auto_opengraph_tags-$var", array()));
  }
  str_replace('<none>', '', $ret);
  return array_filter($ret);
}

function _auto_opengraph_form($type = NULL, $bundle = NULL, $fieldset = NULL) {
  drupal_add_css(drupal_get_path('module', 'auto_opengraph') . '/auto_opengraph_form.css');
  $var = $bundle ? "$type:$bundle" : $type;
  if ($var == 'front') {
    $tags = variable_get("auto_opengraph_tags_front", array());
  }
  elseif ($var && $var != 'default') {
    $tags = variable_get("auto_opengraph_tags-$var", array());
  }
  else {
    $tags = auto_opengraph_get_tags();
  }
  $Basic = array(
    'og:title',            # defaults to the page title
    'og:type',
    'og:url',              # defaults to the current url of the page
    'og:image',
    'fb:admins',
    'fb:app_id',
    'og:site_name',        # in almost all cases the site_name should be automatic
    'og:description',
  );
  $Advanced = array(
    // Multimedia
    'og:audio',
    'og:audio:title',
    'og:audio:artist',
    'og:audio:album',
    'og:audio:type',
    'og:video',
    'og:video:height',
    'og:video:width',
    'og:video:type',
    // Location
    'og:latitude',
    'og:longitude',
    'og:street-address',
    'og:locality',
    'og:region',
    'og:postal-code',
    'og:country-name',
    // Contact
    'og:email',
    'og:phone_number',
    'og:fax_number',
  );
  $Custom = array(); // TODO: implement custom fields?
  $element = array(
    '#type' => 'fieldset',
    '#title' => $fieldset ? $fieldset : t('Auto opengraph tags'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
    '#value_callback' => '_auto_opengraph_element_value',
    '#attributes' => array('class' => array('auto_opengraph_element')),
  );
  foreach (array('Basic', 'Advanced', 'Custom') as $category) {
    if (count($$category)) {
      $element[$category] = array(
        '#type' => 'fieldset',
        '#title' => t($category),
        '#collapsible' => TRUE,
        '#collapsed' => $category != 'Basic',
      );
      foreach ($$category as $field) {
        $element[$category][$field] = array(
          '#type' => 'textfield',
          '#title' => preg_replace('/(og:|fb:)/', '', $field),
          '#default_value' => !empty($tags[$field]) ? $tags[$field] : '',
        );
      }
    }
  }
  $token_type = ($type && !in_array($type, array('default', 'front'))) ? array($type) : array();
  $element['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => $token_type,
  );
  return $element;
}



function _auto_opengraph_map_entities() {
  if (!$cached = cache_get('auto_opengraph:entity_types')) {
    $test = new stdClass();
    foreach (entity_get_info() as $entity_type => $info) {
      if ($info['uri callback'] && function_exists($info['uri callback'])) {
        $uri = @call_user_func_array($info['uri callback'], array($test));
        $entity_types[$entity_type] = $uri['path'];
      }
    }
    cache_set('auto_opengraph:entity_types', $entity_types);
  }
  else {
    $entity_types = $cached->data;
  }
  return is_array($entity_types) ? $entity_types : array();
}

function auto_opengraph_types() {
  $ret = array(
    'activity',
    'sport',
    'bar',
    'company',
    'cafe',
    'hotel',
    'restaurant',
    'cause',
    'sports_league',
    'sports_team',
    'band',
    'government',
    'non_profit',
    'school',
    'university',
    'actor',
    'athlete',
    'author',
    'director',
    'musician',
    'politician',
    'public_figure',
    'city',
    'country',
    'landmark',
    'state_province',
    'album',
    'book',
    'drink',
    'food',
    'game',
    'product',
    'song',
    'movie',
    'tv_show',
    'blog',
    'website',
    'article',
  );
  return $ret;
}



// IMAGE STYLES / EFFECTS

/**
* Implements hook_image_default_styles().
*/
function auto_opengraph_image_default_styles() {
  $styles = array();
  $styles['opengraph'] = array(
    'effects' => array(
      array(
        'name' => 'auto_opengraph_crop',
        'data' => array(
          'aspect' => '3:1',
          'fit' => 'max',
          'reversible' => 1,
        ),
        'weight' => 0,
      ),
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => "300",
          'height' => "300",
          'upscale' => 0,
        ),
        'weight' => 1,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_image_effect_info().
 */
function auto_opengraph_image_effect_info() {
  $effects['auto_opengraph_crop'] = array(
    'label' => t('Aspect Crop'),
    'help' => t('Crop an image to an aspect ratio.'),
    'effect callback' => 'auto_opengraph_crop_effect',
    'form callback' => 'auto_opengraph_crop_form',
    'summary theme' => 'auto_opengraph_crop_summary',
  );
  return $effects;
}

/**
 * HTML for aspect crop action summary on image style page.
 *
 * @ingroup themeable
 *
 * @param array $variables
 *   An array with the single key of 'data', which contains the data for the
 *   image effect.
 *
 * @return string
 *   HTML output for the display of aspect crop settings.
 */
function theme_auto_opengraph_crop_summary($variables) {
  $data = $variables['data'];
  return t('@aspect @fit@reversible', array('@fit' => t($data['fit']), '@aspect' => $data['aspect'], '@reversible' => ($data['reversible'] ? t(', or the reverse') : '')));
}

/**
 * Form builder for the aspect crop image effect.
 *
 * @param array $data
 *
 * @return array the form array.
 */
function auto_opengraph_crop_form($data = array()) {
  $form['aspect'] = array(
    '#type' => 'textfield',
    '#title' => t('Aspect ratio'),
    '#default_value' => isset($data['aspect']) ? $data['aspect'] : NULL,
    '#description' => t('An aspect ratio in the format width:height (e.g. 4:3)'),
    '#size' => 10,
  );
  $form['fit'] = array(
    '#type' => 'select',
    '#title' => t('Fit'),
    '#options' => array('max' => t('Maximum'), 'min' => t('Minimum'), 'exact' => t('Exact')),
    '#default_value' => isset($data['fit']) ? $data['fit'] : 'exact',
    '#description' => t('"Maximum" and "minimum" relate to the highest number of the ratio; for example,
                a maximum ratio of 3:4 will result in an image of 300x500px being cropped down to 300x400,
                even though 3:4 is technically greater than 3:5.
                An image with a minimum ratio of 1:1 will never be affected.')
  );
  $form['reversible'] = array(
    '#type' => 'checkbox',
    '#title' => t('or the reverse'),
    '#default_value' => isset($data['reversible']) ? $data['reversible'] : NULL,
    '#description' => t('i.e. for a value of 3:1, wide pictures would use 3:1 and tall pictures would use 1:3.')
  );
  $form['note'] = array( // opengraph images on facebook are required to be 50x50 or larger.
    '#markup' => '<p>' . t('Note: since this preset was designed for use with opengraph media, it automatically enlarges images with height or width less than 50px.') . '</p>'
  );
  return $form;
}

/**
 * Effect handler for aspect crop image effect.
 *
 * @param array $image
 *   the image array.
 *
 * @param array $data
 *   the data array.
 *
 * @return boolean
 *   Success indicator; true if the effect succeeded.
 */
function auto_opengraph_crop_effect(&$image, $data) {

  // opengraph images on facebook are required to be 50x50 or larger.
  if ($image->info['height'] < 50 || $image->info['width'] < 50) {
    $known = $image->info['height'] < $image->info['width'] ? 'height' : 'width';
    $unknown = $known == 'height' ? 'width' : 'height';
    $new[$known] = 50;
    $new[$unknown] = (50 * $image->info[$unknown]) / $image->info[$known];
    if (!image_scale($image, $new['width'], $new['height'], TRUE)) {
      watchdog('imagecache', 'auto_opengraph_imagecache_crop failed to scale up to 50px. image: %image, data: %data.', array('%image' => $image->source, '%data' => print_r($data, TRUE)), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  // end opengraph-specific code

  list($width, $height) = explode(':', $data['aspect']);
  $desired = $height / $width;
  $current = $image->info['height'] / $image->info['width'];
  if ($data['reversible'] && (($desired < 1 && $current > 1) || ($desired > 1 && $current < 1))) {
    $temp = $height;
    $height = $width;
    $width = $temp;
    $desired = $height / $width;
  }

  if ($current == $desired) return TRUE; // if the image is EXACTLY right, don't do anything.

  if ($desired < 1) {
    $wide = TRUE;
  }
  elseif ($desired > 1) {
    $tall = TRUE;
  }
  else {
    $square = TRUE;
  }

  $min = $data['fit'] == 'min';
  $max = $data['fit'] == 'max';

  if ($max && $tall && ($current < $desired)) return TRUE;
  if ($min && $tall && ($current > $desired)) return TRUE;
  if ($max && $wide && ($current > $desired)) return TRUE;
  if ($min && $wide && ($current < $desired)) return TRUE;
  if ($square && $min) return TRUE; // images with a minimum ratio of 1:1 will never be processed.

  $min = ($min || $data['fit'] == 'exact');
  $max = ($max || $data['fit'] == 'exact');

  // Trim the side
  if (($wide && $max) || ($tall && $min) || ($square && $max)) {
    $h = $image->info['height'];
    $w = round(($h / $height) * $width);
  }

  // Trim the bottom
  else {
    $w = $image->info['width'];
    $h = round(($w / $width) * $height);
  }

  if(!image_crop($image, 'center', 'center', $w, $h)) {
    watchdog('imagecache', 'auto_opengraph_imagecache_crop failed. image: %image, data: %data.', array('%image' => $image->source, '%data' => print_r($data, TRUE)), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

