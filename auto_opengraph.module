<?php

function auto_opengraph_menu() {
  $items['admin/settings/auto-opengraph'] = array(
    'title' => t('Auto Opengraph'),
    'description' => t('Manages creation of opengraph tags for facebook.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auto_opengraph_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'auto_opengraph.admin.inc',
  );
  return $items;
}

function auto_opengraph_theme() {
  $ret = array(
    'auto_opengraph_crop' => array(
      'file' => 'auto_opengraph.imagecache.inc',
      'arguments' => array('element' => NULL),
    ),
    'auto_opengraph_image' => array(
      'file' => 'auto_opengraph.theme.inc',
      'arguments' => array('image' => NULL),
    ),
  );

  // CCK fields
  foreach (array('text', 'number', 'optionwidgets', 'filefield', 'imagefield', 'emvideo', 'emaudio', 'emimage') as $module) {
    if (module_exists($module)) {
      $ret["auto_opengraph_widget_{$module}_value"] = array(
        'file' => 'auto_opengraph.theme.inc',
        'arguments' => array(
          'data' => NULL,
          'property' => NULL,
          'widget' => NULL,
        )
      );
    }
  }

  // Other fields
  foreach (array('teaser', 'body', 'locations', 'taxonomy') as $field) {
    $ret["auto_opengraph_node_{$field}_value"] = array(
      'file' => 'auto_opengraph.theme.inc',
      'arguments' => array(
        'data' => NULL,
        'property' => NULL,
        'field' => NULL,
      )
    );
  }

  return $ret;

}

function auto_opengraph_imagecache_actions() {
  return array(
    'auto_opengraph_crop' => array(
      'name' => 'Aspect Crop',
      'description' => 'Crop an image to an aspect ratio.',
      'file' => 'auto_opengraph.imagecache.inc',
    ),
  );
}

function auto_opengraph_set($property = NULL, $value = NULL) {
  static $og;

  if (is_null($property)) {
    if (is_array($og)) {
      return $og;
    }
    else {
      $og = array();
      return $og;
    }
  }

  if ($property == 'all') {
    if (is_array($value)) {
      $og = array_merge($og, $value);
      return $og;
    }
    return $og;
  }

  $og[$property] = $value;
  return $og;

}

function auto_opengraph_preprocess_page(&$vars) {

  $arg = arg(0);
  if ($arg == 'admin') return;
  $arg = in_array($arg, array('node', 'user', 'taxonomy')) ? $arg : 'other';
  if (!variable_get("auto_opengraph_$arg", TRUE)) return;

  $og = auto_opengraph_set();
  switch ($arg) {

    case 'node':

      // nodes are a little different than other objects because
      // opengraph settings can be different for each type of node

      if (!variable_get("auto_opengraph_node_item_{$vars['node']->type}", TRUE)) return;

      if ($vars['node']->path) $og['url'] = url($vars['node']->path, array('absolute' => TRUE));

      foreach(array_reverse(auto_opengraph_properties()) as $property => $section) {
        if (!$section || !is_numeric($sections[$section] = variable_get("auto_opengraph_node_item_{$vars['node']->type}_add_$section", FALSE))) {
          if ($field = explode('|', variable_get("auto_opengraph_node_field_$property", FALSE))) { // intentional assignment of $field
            if (!empty($vars['node']->{$field[0]})) {
              $field_data = content_fields($field[0], $node->type);
              if (!empty($field_data['widget'])) {
                if ($value = theme("auto_opengraph_widget_{$field_data['widget']['module']}_value", $vars['node']->{$field[0]}, $property, $field_data['widget']['type'])) { // intentional assingment of $value
                  $og[$property] = $value;
                }
              }
              else {
                if ($value = theme("auto_opengraph_node_{$field[0]}_value", 'node', $vars['node']->{$field[0]}, $property, $field)) { // intentional assignment of $value
                  $og[$property] = $value;
                }
              }
            }
          }
        }
      }
      if ($field = variable_get("auto_opengraph_node_item_{$vars['node']->type}_og_type_field", FALSE)) {
        $field_data = content_fields($field[0], $node->type);
        if (!empty($field_data['widget'])) {
          if ($value = theme("auto_opengraph_widget_{$field_data['widget']['module']}_value", $vars['node']->{$field[0]}, 'type', $field_data['widget']['type'])) { // intentional assingment of $value
            $og['type'] = $value;
          }
        }
        else {
          if ($value = theme("auto_opengraph_node_{$field[0]}_value", 'node', $vars['node']->{$field[0]}, 'type', $field)) { // intentional assignment of $value
            $og['type'] = $value;
          }
        }
      }
      break;

    case 'user':
      $data = user_load(arg(1));
      break;

    case 'taxonomy':
      $data = array();
      $terms = taxonomy_terms_parse_string(arg(3));
      if ($terms['operator'] == 'or' || $terms['operator'] == 'and') {
        foreach ($terms['tids'] as $tid) {
          $data[$tid] = taxonomy_get_term($tid);
        }
      }
      break;

    default:
      $data = $vars;
      break;
  }
  
  if ($arg != 'node') {
    foreach (array_reverse(auto_opengraph_properties()) as $property => $section) {
      if (!$section || variable_get("auto_opengraph_{$arg}_add_$section", FALSE)) {
        if ($field = explode('|', variable_get("auto_opengraph_{$arg}_field_$property", FALSE))) { // intentional assignments of $field
          if ($value = theme("auto_opengraph_{$arg}_{$field[0]}_value", $data, $property, $field)) { // intentional assignment of $value
            $og[$property] = $value;
          }
        }
      }
    }
  }

  $temp = ($arg == 'node') ? "node_item_{$vars['node']->type}" : $arg;

  if (!$og['type'] && ($type = variable_get("auto_opengraph_{$temp}_og_type", FALSE))) {
    $og['type'] = $type;
  }

  _auto_opengraph_add('basic', $og);
  foreach (array('location', 'contact', 'fb') as $section) {
    if (variable_get("auto_opengraph_{$temp}_add_$section", FALSE)) {
      _auto_opengraph_add($section, $og);
    }
  }

  if ($vars['is_front'] && variable_get('auto_opengraph_front_page', TRUE)) {
    $og['type'] = variable_get('auto_opengraph_site_type', 'website');
    $og['url'] = ($url = check_url(variable_get('auto_opengraph_site_url', FALSE)) ? $url : url('<front>', array('absolute' => TRUE)));
    foreach(array('image', 'fb:admins', 'fb:app_id') as $property) {
      if ($value = variable_get("auto_opengraph_default_$property", '')) { // intentional assignment of $value
        $og[$property] = $value;
      }
    }
  }

  if (!empty($og)) {
    foreach ($og as $property => $value) {
      if (!in_array($property, array('fb:admins', 'fb:app_id'))) { $property = "og:$property"; }
      drupal_set_html_head('<meta property="' . check_plain($property) . '" content="' . check_plain($value) . '" />');
    }
    $vars['head'] = drupal_get_html_head();
  }

}

function _auto_opengraph_add($part, &$og) {
  include_once('auto_opengraph.functions.inc');
  if (function_exists($function = "_auto_opengraph_add_$part")) {
    $function($og);
  }
//  switch ($part) {
//    case 'basic':
//      auto_opengraph_add_basic($og);
//      break;
//    case 'location':
//      auto_opengraph_add_location($og);
//      break;
//    case 'contact':
//      auto_opengraph_add_contact($og);
//      break;
//    case 'fb':
//      auto_opengraph_add_fb($og);
//      break;
//  }
}

function auto_opengraph_properties() {
  return array(

    // basics
    'site_name' => 0,        # in almost all cases the site_name should be automatic
    'title' => 0,            # defaults to the page title
    'url' => 0,              # defaults to the current url of the page
    'type' => 0,
    'description' => 0,
    'image' => 0,

    // facebook
    'fb:admins' => 'fb',
    'fb:app_id' => 'fb',

    // multimedia
    'audio' => 0,
    'audio:title' => 0,      # optional
    'audio:artist' => 0,     # optional
    'audio:album' => 0,      # optional
    'audio:type' => 0,       # optional

    'video' => 0,
    'video:height' => 0,     # optional
    'video:width' => 0,      # optional
    'video:type' => 0,       # optional

    // Location (automatic if location module is used)
    'latitude' => 'location',
    'longitude' => 'location',
    'street-address' => 'location',
    'locality' => 'location',
    'region' => 'location',
    'postal-code' => 'location',
    'country-name' => 'location',

    // Contact
    'email' => 'contact',
    'phone_number' => 'contact',
    'fax_number' => 'contact',

  );
}